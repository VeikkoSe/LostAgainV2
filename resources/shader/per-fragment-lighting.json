{
    "name": "per-fragment-lighting",
    "fs": [
        "precision mediump float;",
        "varying vec3 vTransformedNormal;",
        "varying vec4 vPosition;",
        "varying vec2 vTextureCoord;",
        "uniform sampler2D uSampler;",
        "void main(void) {",
        "   vec3 lightWeighting;",
        "   vec3 uLightPosition = vec3(20.0, 20.0, 20.0);",
        "   vec3 uLightSpecular = vec3(0.8, 0.8, 0.8);",
        "   vec3 uLightDiffuse = vec3(0.8, 0.8, 0.8);",
        "   vec3 uLightAmbient = vec3(0.5, 0.5, 0.5);",
        "   float uMaterialShininess = 100.0;",
        "   float uAlpha = 1.0;",
        "   vec3 lightDirection = normalize(uLightPosition - vPosition.xyz);",
        "   vec3 normal = normalize(vTransformedNormal);",
        "   float specularLightWeighting = 0.0;",
        "   vec3 eyeDirection = normalize(-vPosition.xyz);",
        "   vec3 reflectionDirection = reflect(-lightDirection, normal);",
        "   specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);",
        "   float diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);",
        "   lightWeighting = uLightAmbient + uLightSpecular * specularLightWeighting + uLightDiffuse * diffuseLightWeighting;",
        "   vec4 fragmentColor = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y ));",
        "   gl_FragColor = vec4(fragmentColor.rgb * lightWeighting, fragmentColor.a * uAlpha);",
        "}"
    ],
    "vs": [
        "attribute vec3 aVertexPosition;",
        "attribute vec3 aVertexNormal;",
        "attribute vec2 aTextureCoord;",
        "uniform mat4 uMVMatrix;",
        "uniform mat4 uPMatrix;",
        "uniform mat3 uNMatrix;",
        "varying vec3 vTransformedNormal;",
        "varying vec4 vPosition;",
        "varying vec2 vTextureCoord;",
        "void main(void) {",
        "   vPosition = uMVMatrix * vec4(aVertexPosition, 1.0);",
        "    vTextureCoord = aTextureCoord;",
        "    gl_Position = uPMatrix * vPosition;",
        "    vTransformedNormal = uNMatrix * aVertexNormal;",
        "}"
    ],
    "uniforms": [
        {
            "uPMatrix": "mat4",
            "uMVMatrix": "mat4",
            "uNMatrix": "mat3",
            "uSampler": "sampler2D"
        }
    ],
    "attributes": [
        {
            "aVertexPosition": "vec3",
            "aVertexNormal": "vec3",
            "aTextureCoord": "vec2"
        }
    ]
}











